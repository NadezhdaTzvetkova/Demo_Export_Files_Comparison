.PHONY: \
	setup setup_env check_venv check-env \
	install install-dev lock upgrade \
	test allure-report \
	format lint check-style \
	clean security-audit reinstall \
	install-lfs bootstrap

# =============================
# üîç PLATFORM DETECTION
# =============================

OS_UNAME := $(shell uname | tr '[:upper:]' '[:lower:]')
ifeq ($(OS),Windows_NT)
	OS_NAME := windows_nt
else
	OS_NAME := $(OS_UNAME)
endif
PYTHON := python3

ifeq ($(OS_NAME), darwin)
	VENV_ACTIVATE := .venv/bin/activate
	VENV_PYTHON := .venv/bin/python
endif
ifeq ($(OS_NAME), linux)
	VENV_ACTIVATE := .venv/bin/activate
	VENV_PYTHON := .venv/bin/python
endif
ifeq ($(OS_NAME), mingw32)
	VENV_ACTIVATE := .venv/Scripts/activate
	VENV_PYTHON := .venv/Scripts/python
endif
ifeq ($(OS_NAME), msys)
	VENV_ACTIVATE := .venv/Scripts/activate
	VENV_PYTHON := .venv/Scripts/python
endif

# =============================
# üå± ENVIRONMENT MANAGEMENT
# =============================

check_venv:
	@echo "üîç Checking if a virtual environment is already active..."
	@if [ -n "$$VIRTUAL_ENV" ]; then \
		echo "‚ö†Ô∏è  Active virtualenv detected: $$VIRTUAL_ENV"; \
		echo "‚ùå Please deactivate it before running this script."; \
		exit 1; \
	else \
		echo "‚úÖ No active virtualenv detected."; \
	fi

setup_env: check_venv
	@echo "üöÄ Creating virtual environment in .venv..."
	@test -d .venv || $(PYTHON) -m venv .venv
	@echo "‚¨ÜÔ∏è  Upgrading pip..."
	@. $(VENV_ACTIVATE) && pip install --upgrade pip
	@echo "üì¶ Installing pip-tools..."
	@. $(VENV_ACTIVATE) && pip install pip-tools
	@echo "‚úÖ Setup complete. Run: source $(VENV_ACTIVATE)"

check-env:
	@echo "üîç Checking .venv and Python version..."
	@if [ ! -d ".venv" ]; then \
		echo "‚ùå .venv not found. Please run: make setup_env"; \
		exit 1; \
	fi
	@echo "‚úÖ .venv exists."
	@echo "üêç Validating Python version..."
	@. $(VENV_ACTIVATE) && $(VENV_PYTHON) --version | grep '3.11' >/dev/null || \
		(echo '‚ùå Python is not 3.11.x' && exit 1)

setup:
	@echo "‚öôÔ∏è Running environment setup..."
	@./.setup_env.sh || echo "‚ö†Ô∏è .setup_env.sh missing or failed"
	@$(MAKE) install-lfs

# =============================
# üì¶ DEPENDENCY MANAGEMENT
# =============================

install:
	@echo "üì¶ Installing runtime dependencies..."
	@. $(VENV_ACTIVATE) && pip install -r requirements.txt

install-dev:
	@echo "üîß Installing dev dependencies..."
	@. $(VENV_ACTIVATE) && pip install -r requirements-dev.txt

lock:
	@echo "üîí Locking runtime and dev dependencies..."
	@. $(VENV_ACTIVATE) && pip-compile --output-file=requirements.txt requirements.in
	@. $(VENV_ACTIVATE) && pip-compile --output-file=requirements-dev.txt requirements-dev.in

upgrade:
	@echo "‚¨ÜÔ∏è  Upgrading requirements and locking them..."
	@. $(VENV_ACTIVATE) && pip-compile --upgrade --output-file=requirements.txt requirements.in
	@. $(VENV_ACTIVATE) && pip-compile --upgrade --output-file=requirements-dev.txt requirements-dev.in
	@echo "‚úÖ Dependencies upgraded and locked."

# =============================
# üß™ TESTING & REPORTING
# =============================

test:
	@echo "üß™ Running BDD tests with behave-parallel..."
	@. $(VENV_ACTIVATE) && behave-parallel -n 4 -f allure_behave.formatter:AllureFormatter -o allure-results/behave $(TAGS)

allure-report:
	@echo "üìä Generating Allure report..."
	@. $(VENV_ACTIVATE) && allure generate allure-results/behave --clean -o allure-report
	@echo "‚úÖ Report at: allure-report/index.html"

# =============================
# üé® CODE FORMATTING & LINTING
# =============================

format:
	@echo "üé® Formatting code with black and ruff..."
	@. $(VENV_ACTIVATE) && black .
	@. $(VENV_ACTIVATE) && ruff check . --fix
	@echo "‚úÖ Code formatted!"

lint:
	@echo "üîç Running ruff lint checks..."
	@. $(VENV_ACTIVATE) && ruff check .
	@echo "‚úÖ Linting completed!"

check-style:
	@echo "üîé Checking code style (ruff lint + ruff format --check)..."
	@. $(VENV_ACTIVATE) && ruff check .
	@. $(VENV_ACTIVATE) && ruff format --check .
	@echo "‚úÖ Style check passed!"

# =============================
# üßπ CLEANUP & SECURITY
# =============================

clean:
	@echo "üßπ Cleaning up project artifacts..."
	rm -rf allure-results allure-report .pytest_cache .coverage coverage.xml .venv *.lock

security-audit:
	@echo "üõ°Ô∏è  Running pip-audit..."
	@. $(VENV_ACTIVATE) && pip install pip-audit >/dev/null
	@. $(VENV_ACTIVATE) && pip-audit || echo "‚ö†Ô∏è Vulnerabilities found."

# =============================
# ‚ôªÔ∏è FULL REINSTALL
# =============================

reinstall:
	@echo "üí£ Wiping environment and caches..."
	rm -rf .venv requirements.txt requirements-dev.txt __pycache__ .mypy_cache .ruff_cache .pytest_cache
	@echo "üîÅ Reinstalling environment..."
	@$(MAKE) setup_env
	@$(MAKE) install-lfs

# =============================
# üß∑ GIT LFS (Cross-OS Logic)
# =============================

install-lfs:
	@echo "üì¶ Checking for Git LFS..."
	@if command -v git-lfs >/dev/null 2>&1; then \
		echo "‚úÖ Git LFS is already installed."; \
	else \
		echo "‚ùå Git LFS not found."; \
		if [ "$(OS_NAME)" = "darwin" ]; then \
			echo "üçè Installing Git LFS on macOS..."; \
			if ! command -v brew >/dev/null 2>&1; then \
				echo "üì• Installing Homebrew..."; \
				/bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; \
			fi; \
			brew install git-lfs; \
		elif [ "$(OS_NAME)" = "linux" ]; then \
			echo "üêß Installing Git LFS on Linux..."; \
			if command -v apt-get >/dev/null 2>&1; then \
				sudo apt-get update && sudo apt-get install -y git-lfs; \
			elif command -v dnf >/dev/null 2>&1; then \
				sudo dnf install -y git-lfs; \
			elif command -v yum >/dev/null 2>&1; then \
				sudo yum install -y git-lfs; \
			else \
				echo "‚ö†Ô∏è Unsupported package manager. Please install Git LFS manually: https://git-lfs.github.com/"; \
				exit 1; \
			fi; \
		elif [ "$(OS_NAME)" = "windows_nt" ]; then \
			echo "ü™ü Installing Git LFS on Windows..."; \
			if command -v choco >/dev/null 2>&1; then \
				choco install git-lfs -y; \
			else \
				echo "‚ö†Ô∏è Chocolatey not found. Please install Git LFS manually: https://git-lfs.github.com/"; \
				exit 1; \
			fi; \
		else \
			echo "‚ùå Unsupported OS: $(OS_NAME). Install Git LFS manually."; \
			exit 1; \
		fi; \
	fi
	@git lfs install || { echo 'üí• Failed to initialize Git LFS'; exit 1; }
	@echo "üéâ Git LFS installed and ready to use!"

# =============================
# üöÄ FULL BOOTSTRAP
# =============================

bootstrap:
	@echo "üöÄ Bootstrapping project from scratch..."
	@$(MAKE) reinstall
	@echo "üì¶ Checking for pre-commit..."
	@if . $(VENV_ACTIVATE) && command -v pre-commit >/dev/null 2>&1; then \
		echo "‚úÖ Installing pre-commit hooks..."; \
		. $(VENV_ACTIVATE) && pre-commit install; \
	else \
		echo "‚ö†Ô∏è pre-commit not found. Skipping hook installation."; \
	fi
	@git add -A
	@git commit -m "ü§ñ Auto-bootstrap update" || echo "‚ö†Ô∏è Nothing to commit."
	@CURRENT_BRANCH=$$(git rev-parse --abbrev-ref HEAD); \
	echo "üîÄ Pushing to branch: $$CURRENT_BRANCH"; \
	git push origin $$CURRENT_BRANCH
	@echo "‚úÖ Bootstrap complete. Run: source $(VENV_ACTIVATE)"
