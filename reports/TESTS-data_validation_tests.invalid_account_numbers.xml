<testsuite name="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" tests="22" errors="0" failures="0" skipped="0" time="0.0" timestamp="2025-03-20T10:51:23.068591" hostname="Mac.localstaff"><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Ensure all account numbers follow the correct format -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @format_check @data_integrity
  Scenario Outline: Ensure all account numbers follow the correct format -- @1.1 
    Given a bank export file "bank_export_baseline_test.csv" ... untested in 0.000s
    When I check the "Account Number" column in the "N/A" sheet ... undefined in 0.000s
    Then all account numbers should match the expected pattern "^\d{10,12}$" ... undefined in 0.000s
    And invalidly formatted account numbers should be flagged ... undefined in 0.000s
    And a correction suggestion should be provided ... undefined in 0.000s
    And an alert should be sent for accounts not matching regulatory formats ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Ensure all account numbers follow the correct format -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @format_check @data_integrity
  Scenario Outline: Ensure all account numbers follow the correct format -- @1.2 
    Given a bank export file "bank_export_baseline_test.xlsx" ... untested in 0.000s
    When I check the "Account Number" column in the "Sheet1" sheet ... undefined in 0.000s
    Then all account numbers should match the expected pattern "^\d{10,12}$" ... undefined in 0.000s
    And invalidly formatted account numbers should be flagged ... undefined in 0.000s
    And a correction suggestion should be provided ... undefined in 0.000s
    And an alert should be sent for accounts not matching regulatory formats ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Validate IBAN compliance for international transactions -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @iban_check @regulatory_compliance
  Scenario Outline: Validate IBAN compliance for international transactions -- @1.1 
    Given a bank export file "bank_export_iban_validation_test.csv" ... untested in 0.000s
    When I check the "Account Number" column in the "N/A" sheet ... undefined in 0.000s
    Then all IBAN numbers should be valid according to country-specific rules ... undefined in 0.000s
    And invalid IBANs should be flagged for correction ... undefined in 0.000s
    And a report should list all incorrectly formatted IBANs ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Validate IBAN compliance for international transactions -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @iban_check @regulatory_compliance
  Scenario Outline: Validate IBAN compliance for international transactions -- @1.2 
    Given a bank export file "bank_export_iban_validation_test.xlsx" ... untested in 0.000s
    When I check the "Account Number" column in the "Sheet1" sheet ... undefined in 0.000s
    Then all IBAN numbers should be valid according to country-specific rules ... undefined in 0.000s
    And invalid IBANs should be flagged for correction ... undefined in 0.000s
    And a report should list all incorrectly formatted IBANs ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Detect account numbers with special characters or alphabets -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @invalid_characters @edge_case
  Scenario Outline: Detect account numbers with special characters or alphabets -- @1.1 
    Given a bank export file "bank_export_invalid_characters_test.csv" ... untested in 0.000s
    When I check the "Account Number" column in the "N/A" sheet ... undefined in 0.000s
    Then account numbers containing non-numeric characters should be flagged ... undefined in 0.000s
    And an error report should be generated with affected accounts ... undefined in 0.000s
    And transactions linked to invalid accounts should be flagged for further review ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Detect account numbers with special characters or alphabets -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @invalid_characters @edge_case
  Scenario Outline: Detect account numbers with special characters or alphabets -- @1.2 
    Given a bank export file "bank_export_invalid_characters_test.xlsx" ... untested in 0.000s
    When I check the "Account Number" column in the "Sheet1" sheet ... undefined in 0.000s
    Then account numbers containing non-numeric characters should be flagged ... undefined in 0.000s
    And an error report should be generated with affected accounts ... undefined in 0.000s
    And transactions linked to invalid accounts should be flagged for further review ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Detect duplicate account numbers with mismatched account holder names -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @duplicate_accounts @fraud_detection
  Scenario Outline: Detect duplicate account numbers with mismatched account holder names -- @1.1 
    Given a bank export file "bank_export_duplicate_accounts_test.csv" ... untested in 0.000s
    When I check the "Account Number" column in the "N/A" sheet ... undefined in 0.000s
    Then duplicate account numbers should be flagged ... undefined in 0.000s
    And mismatched account holders for the same account should trigger a fraud alert ... undefined in 0.000s
    And transactions under duplicated accounts should be reviewed ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Detect duplicate account numbers with mismatched account holder names -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @duplicate_accounts @fraud_detection
  Scenario Outline: Detect duplicate account numbers with mismatched account holder names -- @1.2 
    Given a bank export file "bank_export_duplicate_accounts_test.xlsx" ... untested in 0.000s
    When I check the "Account Number" column in the "Sheet1" sheet ... undefined in 0.000s
    Then duplicate account numbers should be flagged ... undefined in 0.000s
    And mismatched account holders for the same account should trigger a fraud alert ... undefined in 0.000s
    And transactions under duplicated accounts should be reviewed ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Ensure no missing or blank account numbers -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @missing_values @data_quality
  Scenario Outline: Ensure no missing or blank account numbers -- @1.1 
    Given a bank export file "bank_export_missing_accounts_test.csv" ... untested in 0.000s
    When I check the "Account Number" column in the "N/A" sheet ... undefined in 0.000s
    Then no account field should be empty or null ... undefined in 0.000s
    And missing account numbers should be flagged ... undefined in 0.000s
    And an auto-fill suggestion should be provided if possible ... undefined in 0.000s
    And transactions missing an account number should be categorized separately for investigation ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Ensure no missing or blank account numbers -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @missing_values @data_quality
  Scenario Outline: Ensure no missing or blank account numbers -- @1.2 
    Given a bank export file "bank_export_missing_accounts_test.xlsx" ... untested in 0.000s
    When I check the "Account Number" column in the "Sheet1" sheet ... undefined in 0.000s
    Then no account field should be empty or null ... undefined in 0.000s
    And missing account numbers should be flagged ... undefined in 0.000s
    And an auto-fill suggestion should be provided if possible ... undefined in 0.000s
    And transactions missing an account number should be categorized separately for investigation ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Validate account numbers in large datasets -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @large_files @performance_testing
  Scenario Outline: Validate account numbers in large datasets -- @1.1 
    Given a bank export file "bank_export_large_file_accounts_test.csv" ... untested in 0.000s
    When I check the "Account Number" column in a file with "100000" rows ... undefined in 0.000s
    Then all account numbers should maintain format consistency ... undefined in 0.000s
    And inconsistencies should be flagged for bulk correction ... undefined in 0.000s
    And system performance should be benchmarked for optimization ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Validate account numbers in large datasets -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @large_files @performance_testing
  Scenario Outline: Validate account numbers in large datasets -- @1.2 
    Given a bank export file "bank_export_large_file_accounts_test.xlsx" ... untested in 0.000s
    When I check the "Account Number" column in a file with "500000" rows ... undefined in 0.000s
    Then all account numbers should maintain format consistency ... undefined in 0.000s
    And inconsistencies should be flagged for bulk correction ... undefined in 0.000s
    And system performance should be benchmarked for optimization ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Detect blacklisted or restricted account numbers -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @blacklisted_accounts @high_risk_accounts
  Scenario Outline: Detect blacklisted or restricted account numbers -- @1.1 
    Given a bank export file "bank_export_blacklisted_accounts_test.csv" ... untested in 0.000s
    When I check the "Account Number" column in the "N/A" sheet ... undefined in 0.000s
    Then accounts matching known blacklisted or restricted patterns should be flagged ... undefined in 0.000s
    And flagged accounts should be logged for review ... undefined in 0.000s
    And an alert should be sent to compliance teams ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Detect blacklisted or restricted account numbers -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @blacklisted_accounts @high_risk_accounts
  Scenario Outline: Detect blacklisted or restricted account numbers -- @1.2 
    Given a bank export file "bank_export_blacklisted_accounts_test.xlsx" ... untested in 0.000s
    When I check the "Account Number" column in the "Sheet1" sheet ... undefined in 0.000s
    Then accounts matching known blacklisted or restricted patterns should be flagged ... undefined in 0.000s
    And flagged accounts should be logged for review ... undefined in 0.000s
    And an alert should be sent to compliance teams ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Identify truncated or improperly padded account numbers -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @account_truncation @data_integrity
  Scenario Outline: Identify truncated or improperly padded account numbers -- @1.1 
    Given a bank export file "bank_export_truncated_accounts_test.csv" ... untested in 0.000s
    When I check the "Account Number" column in the "<sheet_name>" sheet ... undefined in 0.000s
    Then account numbers shorter than "10" digits should be flagged ... undefined in 0.000s
    And excessively padded account numbers should be normalized ... undefined in 0.000s
    And truncation issues should be logged for correction ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Identify truncated or improperly padded account numbers -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @account_truncation @data_integrity
  Scenario Outline: Identify truncated or improperly padded account numbers -- @1.2 
    Given a bank export file "bank_export_truncated_accounts_test.xlsx" ... untested in 0.000s
    When I check the "Account Number" column in the "<sheet_name>" sheet ... undefined in 0.000s
    Then account numbers shorter than "12" digits should be flagged ... undefined in 0.000s
    And excessively padded account numbers should be normalized ... undefined in 0.000s
    And truncation issues should be logged for correction ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Validate bank-specific account structures with branch codes -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @bank_branch_codes @institutional_accounts
  Scenario Outline: Validate bank-specific account structures with branch codes -- @1.1 
    Given a bank export file "bank_export_branch_code_test.csv" ... untested in 0.000s
    When I check the "Account Number" column in the "<sheet_name>" sheet ... undefined in 0.000s
    Then account numbers should include valid branch and institution codes "4-digit prefix" ... undefined in 0.000s
    And invalid structures should be flagged for correction ... undefined in 0.000s
    And system logs should highlight mismatched formats for review ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Validate bank-specific account structures with branch codes -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @bank_branch_codes @institutional_accounts
  Scenario Outline: Validate bank-specific account structures with branch codes -- @1.2 
    Given a bank export file "bank_export_branch_code_test.xlsx" ... untested in 0.000s
    When I check the "Account Number" column in the "<sheet_name>" sheet ... undefined in 0.000s
    Then account numbers should include valid branch and institution codes "6-digit prefix" ... undefined in 0.000s
    And invalid structures should be flagged for correction ... undefined in 0.000s
    And system logs should highlight mismatched formats for review ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Detect transactions involving closed or dormant accounts -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @account_closure_check @dormant_accounts
  Scenario Outline: Detect transactions involving closed or dormant accounts -- @1.1 
    Given a bank export file "bank_export_closed_accounts_test.csv" ... untested in 0.000s
    When I check the "Account Number" column in the "<sheet_name>" sheet ... undefined in 0.000s
    Then transactions linked to closed accounts should be flagged ... undefined in 0.000s
    And an alert should be sent for manual review ... undefined in 0.000s
    And affected transactions should be logged separately ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Detect transactions involving closed or dormant accounts -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @account_closure_check @dormant_accounts
  Scenario Outline: Detect transactions involving closed or dormant accounts -- @1.2 
    Given a bank export file "bank_export_closed_accounts_test.xlsx" ... untested in 0.000s
    When I check the "Account Number" column in the "<sheet_name>" sheet ... undefined in 0.000s
    Then transactions linked to closed accounts should be flagged ... undefined in 0.000s
    And an alert should be sent for manual review ... undefined in 0.000s
    And affected transactions should be logged separately ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Ensure system resilience against malformed account numbers -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @error_handling @resilience_testing
  Scenario Outline: Ensure system resilience against malformed account numbers -- @1.1 
    Given a bank export file "bank_export_malformed_accounts_test.csv" ... untested in 0.000s
    When I check the "Account Number" column in the "<sheet_name>" sheet ... undefined in 0.000s
    Then malformed account numbers should not crash the system ... undefined in 0.000s
    And structured error handling should ensure continued processing ... undefined in 0.000s
    And logs should capture all malformed entries for review ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="data_validation_tests.invalid_account_numbers.Validate Invalid Account Numbers in Bank Export Files" name="Ensure system resilience against malformed account numbers -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @account_validation @error_handling @resilience_testing
  Scenario Outline: Ensure system resilience against malformed account numbers -- @1.2 
    Given a bank export file "bank_export_malformed_accounts_test.xlsx" ... untested in 0.000s
    When I check the "Account Number" column in the "<sheet_name>" sheet ... undefined in 0.000s
    Then malformed account numbers should not crash the system ... undefined in 0.000s
    And structured error handling should ensure continued processing ... undefined in 0.000s
    And logs should capture all malformed entries for review ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase></testsuite>