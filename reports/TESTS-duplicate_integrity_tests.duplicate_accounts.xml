<testsuite name="duplicate_integrity_tests.duplicate_accounts.Detect Duplicate Account Numbers in Export Files" tests="10" errors="0" failures="0" skipped="0" time="0.0" timestamp="2025-03-20T10:51:23.096383" hostname="Mac.localstaff"><testcase classname="duplicate_integrity_tests.duplicate_accounts.Detect Duplicate Account Numbers in Export Files" name="Identify duplicate account numbers in transaction records -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_accounts @data_integrity @account_validation
  Scenario Outline: Identify duplicate account numbers in transaction records -- @1.1 
    Given a bank export file "bank_export_duplicate_accounts_test.csv" ... untested in 0.000s
    When I check the "Account Number" column in the "N/A" sheet ... undefined in 0.000s
    Then duplicate account numbers should be flagged ... undefined in 0.000s
    And a report should be generated listing duplicate occurrences ... undefined in 0.000s
    And accounts with high-frequency duplication should be escalated for review ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_accounts.Detect Duplicate Account Numbers in Export Files" name="Identify duplicate account numbers in transaction records -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_accounts @data_integrity @account_validation
  Scenario Outline: Identify duplicate account numbers in transaction records -- @1.2 
    Given a bank export file "bank_export_duplicate_accounts_test.xlsx" ... untested in 0.000s
    When I check the "Account Number" column in the "Sheet1" sheet ... undefined in 0.000s
    Then duplicate account numbers should be flagged ... undefined in 0.000s
    And a report should be generated listing duplicate occurrences ... undefined in 0.000s
    And accounts with high-frequency duplication should be escalated for review ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_accounts.Detect Duplicate Account Numbers in Export Files" name="Detect transactions with duplicate accounts but different names -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_accounts @edge_case @linked_transactions
  Scenario Outline: Detect transactions with duplicate accounts but different names -- @1.1 
    Given a bank export file "bank_export_duplicate_accounts_diff_names.csv" ... untested in 0.000s
    When I check transactions in the "N/A" sheet ... undefined in 0.000s
    Then account numbers with different associated names should be flagged ... undefined in 0.000s
    And a fraud alert should be raised for investigation ... undefined in 0.000s
    And an audit trail should be created to track duplicate accounts ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_accounts.Detect Duplicate Account Numbers in Export Files" name="Detect transactions with duplicate accounts but different names -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_accounts @edge_case @linked_transactions
  Scenario Outline: Detect transactions with duplicate accounts but different names -- @1.2 
    Given a bank export file "bank_export_duplicate_accounts_diff_names.xlsx" ... untested in 0.000s
    When I check transactions in the "Sheet1" sheet ... undefined in 0.000s
    Then account numbers with different associated names should be flagged ... undefined in 0.000s
    And a fraud alert should be raised for investigation ... undefined in 0.000s
    And an audit trail should be created to track duplicate accounts ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_accounts.Detect Duplicate Account Numbers in Export Files" name="Identify duplicate accounts with missing mandatory fields -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_accounts @data_quality @missing_values
  Scenario Outline: Identify duplicate accounts with missing mandatory fields -- @1.1 
    Given a bank export file "bank_export_duplicate_accounts_missing_fields.csv" ... untested in 0.000s
    When I check the "Account Number" and "Account Holder Name" columns in the "N/A" sheet ... undefined in 0.000s
    Then duplicate account numbers with missing values should be flagged ... undefined in 0.000s
    And incomplete records should be marked for manual review ... undefined in 0.000s
    And suggestions should be provided for data completion ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_accounts.Detect Duplicate Account Numbers in Export Files" name="Identify duplicate accounts with missing mandatory fields -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_accounts @data_quality @missing_values
  Scenario Outline: Identify duplicate accounts with missing mandatory fields -- @1.2 
    Given a bank export file "bank_export_duplicate_accounts_missing_fields.xlsx" ... untested in 0.000s
    When I check the "Account Number" and "Account Holder Name" columns in the "Sheet1" sheet ... undefined in 0.000s
    Then duplicate account numbers with missing values should be flagged ... undefined in 0.000s
    And incomplete records should be marked for manual review ... undefined in 0.000s
    And suggestions should be provided for data completion ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_accounts.Detect Duplicate Account Numbers in Export Files" name="Validate duplicate account detection in large datasets -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_accounts @edge_case @large_files @performance
  Scenario Outline: Validate duplicate account detection in large datasets -- @1.1 
    Given a bank export file "bank_export_large_file_duplicate_accounts.csv" ... untested in 0.000s
    When I check for duplicate accounts in a file with more than 100,000 rows ... undefined in 0.000s
    Then all duplicate occurrences should be detected efficiently ... undefined in 0.000s
    And system performance should be benchmarked for optimization ... undefined in 0.000s
    And flagged duplicates should be logged for auditing ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_accounts.Detect Duplicate Account Numbers in Export Files" name="Validate duplicate account detection in large datasets -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_accounts @edge_case @large_files @performance
  Scenario Outline: Validate duplicate account detection in large datasets -- @1.2 
    Given a bank export file "bank_export_large_file_duplicate_accounts.xlsx" ... untested in 0.000s
    When I check for duplicate accounts in a file with more than 100,000 rows ... undefined in 0.000s
    Then all duplicate occurrences should be detected efficiently ... undefined in 0.000s
    And system performance should be benchmarked for optimization ... undefined in 0.000s
    And flagged duplicates should be logged for auditing ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_accounts.Detect Duplicate Account Numbers in Export Files" name="Detect duplicate accounts linked to suspicious transactions -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_accounts @high_risk @fraud_detection
  Scenario Outline: Detect duplicate accounts linked to suspicious transactions -- @1.1 
    Given a bank export file "bank_export_high_risk_duplicate_accounts.csv" ... untested in 0.000s
    When I check for duplicate accounts in high-risk transactions in the "N/A" sheet ... undefined in 0.000s
    Then duplicate accounts linked to fraudulent transactions should be flagged ... undefined in 0.000s
    And flagged cases should trigger a compliance alert ... undefined in 0.000s
    And an escalation report should be generated for further review ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_accounts.Detect Duplicate Account Numbers in Export Files" name="Detect duplicate accounts linked to suspicious transactions -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_accounts @high_risk @fraud_detection
  Scenario Outline: Detect duplicate accounts linked to suspicious transactions -- @1.2 
    Given a bank export file "bank_export_high_risk_duplicate_accounts.xlsx" ... untested in 0.000s
    When I check for duplicate accounts in high-risk transactions in the "Sheet1" sheet ... undefined in 0.000s
    Then duplicate accounts linked to fraudulent transactions should be flagged ... undefined in 0.000s
    And flagged cases should trigger a compliance alert ... undefined in 0.000s
    And an escalation report should be generated for further review ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase></testsuite>