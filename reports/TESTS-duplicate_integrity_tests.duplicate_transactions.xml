<testsuite name="duplicate_integrity_tests.duplicate_transactions.Detect Duplicate Transactions in Export Files" tests="10" errors="0" failures="0" skipped="0" time="0.0" timestamp="2025-03-20T12:53:43.914052" hostname="Mac.localstaff"><testcase classname="duplicate_integrity_tests.duplicate_transactions.Detect Duplicate Transactions in Export Files" name="Identify duplicate transaction records in the database -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_transactions @data_integrity @transaction_validation
  Scenario Outline: Identify duplicate transaction records in the database -- @1.1 
    Given a bank export file "bank_export_duplicate_transactions_test.csv" ... untested in 0.000s
    When I check the "Transaction ID" column in the "N/A" sheet ... undefined in 0.000s
    Then duplicate transaction records should be flagged ... undefined in 0.000s
    And a report should be generated listing duplicate occurrences ... undefined in 0.000s
    And duplicate transactions should be marked for manual review ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_transactions.Detect Duplicate Transactions in Export Files" name="Identify duplicate transaction records in the database -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_transactions @data_integrity @transaction_validation
  Scenario Outline: Identify duplicate transaction records in the database -- @1.2 
    Given a bank export file "bank_export_duplicate_transactions_test.xlsx" ... untested in 0.000s
    When I check the "Transaction ID" column in the "Sheet1" sheet ... undefined in 0.000s
    Then duplicate transaction records should be flagged ... undefined in 0.000s
    And a report should be generated listing duplicate occurrences ... undefined in 0.000s
    And duplicate transactions should be marked for manual review ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_transactions.Detect Duplicate Transactions in Export Files" name="Detect duplicate transactions with different amounts -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_transactions @edge_case @amount_mismatch
  Scenario Outline: Detect duplicate transactions with different amounts -- @1.1 
    Given a bank export file "bank_export_duplicate_transactions_amount_mismatch.csv" ... untested in 0.000s
    When I check the "Transaction ID" and "Amount" columns in the "N/A" sheet ... undefined in 0.000s
    Then transactions with matching IDs but different amounts should be flagged ... undefined in 0.000s
    And a potential data entry error should be reported ... undefined in 0.000s
    And flagged transactions should be escalated for further validation ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_transactions.Detect Duplicate Transactions in Export Files" name="Detect duplicate transactions with different amounts -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_transactions @edge_case @amount_mismatch
  Scenario Outline: Detect duplicate transactions with different amounts -- @1.2 
    Given a bank export file "bank_export_duplicate_transactions_amount_mismatch.xlsx" ... untested in 0.000s
    When I check the "Transaction ID" and "Amount" columns in the "Sheet1" sheet ... undefined in 0.000s
    Then transactions with matching IDs but different amounts should be flagged ... undefined in 0.000s
    And a potential data entry error should be reported ... undefined in 0.000s
    And flagged transactions should be escalated for further validation ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_transactions.Detect Duplicate Transactions in Export Files" name="Identify duplicate transactions with timestamp variations -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_transactions @data_quality @timestamp_variance
  Scenario Outline: Identify duplicate transactions with timestamp variations -- @1.1 
    Given a bank export file "bank_export_duplicate_transactions_timestamp_variance.csv" ... untested in 0.000s
    When I check the "Transaction ID" and "Timestamp" columns in the "N/A" sheet ... undefined in 0.000s
    Then transactions with identical IDs but differing timestamps should be flagged ... undefined in 0.000s
    And flagged transactions should be reviewed for potential system processing errors ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_transactions.Detect Duplicate Transactions in Export Files" name="Identify duplicate transactions with timestamp variations -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_transactions @data_quality @timestamp_variance
  Scenario Outline: Identify duplicate transactions with timestamp variations -- @1.2 
    Given a bank export file "bank_export_duplicate_transactions_timestamp_variance.xlsx" ... untested in 0.000s
    When I check the "Transaction ID" and "Timestamp" columns in the "Sheet1" sheet ... undefined in 0.000s
    Then transactions with identical IDs but differing timestamps should be flagged ... undefined in 0.000s
    And flagged transactions should be reviewed for potential system processing errors ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_transactions.Detect Duplicate Transactions in Export Files" name="Validate duplicate transaction detection in large datasets -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_transactions @edge_case @large_files @performance
  Scenario Outline: Validate duplicate transaction detection in large datasets -- @1.1 
    Given a bank export file "bank_export_large_file_duplicate_transactions.csv" ... untested in 0.000s
    When I check for duplicate transactions in a file with more than 100,000 rows ... undefined in 0.000s
    Then all duplicate occurrences should be detected efficiently ... undefined in 0.000s
    And system performance should be benchmarked for optimization ... undefined in 0.000s
    And flagged duplicates should be logged for auditing ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_transactions.Detect Duplicate Transactions in Export Files" name="Validate duplicate transaction detection in large datasets -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_transactions @edge_case @large_files @performance
  Scenario Outline: Validate duplicate transaction detection in large datasets -- @1.2 
    Given a bank export file "bank_export_large_file_duplicate_transactions.xlsx" ... untested in 0.000s
    When I check for duplicate transactions in a file with more than 100,000 rows ... undefined in 0.000s
    Then all duplicate occurrences should be detected efficiently ... undefined in 0.000s
    And system performance should be benchmarked for optimization ... undefined in 0.000s
    And flagged duplicates should be logged for auditing ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_transactions.Detect Duplicate Transactions in Export Files" name="Detect duplicate transactions linked to suspicious activities -- @1.1 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_transactions @high_risk @fraud_detection
  Scenario Outline: Detect duplicate transactions linked to suspicious activities -- @1.1 
    Given a bank export file "bank_export_high_risk_duplicate_transactions.csv" ... untested in 0.000s
    When I check for duplicate transactions in high-risk transactions in the "N/A" sheet ... undefined in 0.000s
    Then duplicate transactions linked to fraudulent activities should be flagged ... undefined in 0.000s
    And flagged cases should trigger an alert for compliance review ... undefined in 0.000s
    And an escalation report should be generated for further investigation ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="duplicate_integrity_tests.duplicate_transactions.Detect Duplicate Transactions in Export Files" name="Detect duplicate transactions linked to suspicious activities -- @1.2 " status="untested" time="0"><system-out>
<![CDATA[
@scenario.begin

  @duplicate_transactions @high_risk @fraud_detection
  Scenario Outline: Detect duplicate transactions linked to suspicious activities -- @1.2 
    Given a bank export file "bank_export_high_risk_duplicate_transactions.xlsx" ... untested in 0.000s
    When I check for duplicate transactions in high-risk transactions in the "Sheet1" sheet ... undefined in 0.000s
    Then duplicate transactions linked to fraudulent activities should be flagged ... undefined in 0.000s
    And flagged cases should trigger an alert for compliance review ... undefined in 0.000s
    And an escalation report should be generated for further investigation ... undefined in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase></testsuite>